import logging

from aiogram.enums import ReactionTypeType
from aiogram.types import Message, MessageReactionUpdated, ReactionTypeEmoji
from aiogram import F, Router, Bot
from trello import TrelloClient

from config import TRELLO_API_KEY, TRELLO_API_SECRET, TRELLO_BOARD_ID, TRELLO_TOKEN
from db import get_db, MessageModel

router = Router()

trello_client = TrelloClient(
    api_key=TRELLO_API_KEY,
    api_secret=TRELLO_API_SECRET,
    token=TRELLO_TOKEN
)


def get_message(message_id):
    with next(get_db()) as db:
        message = db.query(MessageModel).filter(MessageModel.message_id == message_id).first()
        return message.message_text if message else None


def add_message(message_id, message_text):
    try:
        with next(get_db()) as db:
            if get_message(message_id):
                logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å id {message_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return
            new_message = MessageModel(message_id=message_id, message_text=message_text)
            db.add(new_message)
            db.commit()
            logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å id {message_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")


@router.message(F.text)
async def message_to_save(message: Message):
    if message.text and message.text.startswith("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:"):
        add_message(message.message_id, message.text)


@router.message_reaction()
async def message_reaction_handler(reaction: MessageReactionUpdated, bot: Bot):
    reaction_ = reaction.new_reaction
    print(reaction)
    emoji = [react.emoji for react in reaction_]
    # if emoji[0] == "üñãÔ∏è":
    # if emoji[0] == "üî•"
    if emoji[0] == "üñãÔ∏è":
        message = get_message(reaction.message_id)

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        lines = message.split('\n')
        course = next((line.split(': ')[1] for line in lines if line.startswith("–ö—É—Ä—Å:")), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        date = next((line.split(': ')[1] for line in lines if line.startswith("–î–∞—Ç–∞:")), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        feedback = next((line.split(': ')[1] for line in lines if line.startswith("–û—Ç–∑—ã–≤:")), "–ù–µ—Ç –æ—Ç–∑—ã–≤–∞")
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ Trello
        board = trello_client.get_board(TRELLO_BOARD_ID)
        lists = board.list_lists()
        print(lists)
        target_list = lists[0]  # –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Å–ø–∏—Å–æ–∫

        card = target_list.add_card(
            name=f"–û—Ç–∑—ã–≤ –æ –∫—É—Ä—Å–µ {course} –¥–∞—Ç–∞ {date} –æ—Ç–∑—ã–≤: {feedback}",
            desc=feedback
        )
        try:
            await bot.set_message_reaction(
                chat_id=reaction.chat.id,
                message_id=reaction.message_id,
                reaction=[ReactionTypeEmoji(emoji="üëÄ")]
            )
            db = next(get_db())
            db.query(MessageModel).filter(MessageModel.message_id == reaction.message_id).delete()
            db.commit()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∞–∫—Ü–∏–∏: {e}")


# logging.info(f"–°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –≤ Trello: {card.short_url}")
